#!/usr/bin/env node\n\nimport { program } from 'commander';\nimport chalk from 'chalk';\nimport figlet from 'figlet';\nimport boxen from 'boxen';\nimport ora from 'ora';\nimport readline from 'readline';\nimport { execSync } from 'child_process';\nimport fs from 'fs-extra';\nimport path from 'path';\n\n/**\n * Demo Debo - Simplified version to show functionality\n */\n\nclass DemoDeboCLI {\n  constructor() {\n    this.projectDetected = false;\n    this.currentPath = process.cwd();\n  }\n  \n  async detectProject() {\n    const indicators = ['package.json', 'requirements.txt', '.git', 'Cargo.toml'];\n    \n    for (const indicator of indicators) {\n      if (await fs.pathExists(path.join(this.currentPath, indicator))) {\n        this.projectDetected = true;\n        return indicator;\n      }\n    }\n    return null;\n  }\n  \n  showWelcome() {\n    console.clear();\n    \n    const header = figlet.textSync('DEBO', {\n      font: 'ANSI Shadow',\n      horizontalLayout: 'default'\n    });\n    \n    console.log(chalk.cyan(header));\n    console.log(chalk.gray('━'.repeat(80)));\n    console.log(chalk.yellow.bold('🤖 Autonomous Development System - DEMO'));\n    console.log(chalk.gray('Local LLMs • Better Memory • Faster Development'));\n    console.log(chalk.gray('━'.repeat(80)));\n    console.log('');\n  }\n  \n  async runDemo() {\n    this.showWelcome();\n    \n    // Project detection\n    const spinner = ora('Detecting project...').start();\n    const projectIndicator = await this.detectProject();\n    \n    if (projectIndicator) {\n      spinner.succeed(`Project detected: ${chalk.yellow(path.basename(this.currentPath))} (${projectIndicator})`);\n    } else {\n      spinner.succeed('No project detected');\n    }\n    \n    // Show system status\n    console.log('\\n' + chalk.cyan('📊 System Status:'));\n    \n    // Check Redis\n    try {\n      execSync('redis-cli ping', { stdio: 'pipe' });\n      console.log(`  ${chalk.green('✅')} Redis: Running`);\n    } catch {\n      console.log(`  ${chalk.red('❌')} Redis: Not running`);\n    }\n    \n    // Check Ollama\n    try {\n      execSync('curl -s http://localhost:11434/api/tags', { stdio: 'pipe' });\n      console.log(`  ${chalk.green('✅')} Ollama: Running`);\n    } catch {\n      console.log(`  ${chalk.red('❌')} Ollama: Not running`);\n    }\n    \n    console.log(`  ${chalk.green('✅')} Node.js: ${process.version}`);\n    console.log(`  ${chalk.green('✅')} Memory: ${(process.memoryUsage().heapUsed / 1024 / 1024).toFixed(1)}MB`);\n    \n    // Show capabilities\n    this.showCapabilities();\n    \n    if (this.projectDetected) {\n      await this.showProjectAnalysis();\n    }\n    \n    this.showNextSteps();\n  }\n  \n  showCapabilities() {\n    const capabilitiesBox = boxen(\n      `${chalk.bold('🎯 Core Capabilities:')}\\n\\n` +\n      `${chalk.cyan('🔍 Codebase Analysis')} - Deep project understanding\\n` +\n      `${chalk.green('🤖 Agent Orchestration')} - 13 specialized AI agents\\n` +\n      `${chalk.blue('💾 Memory Management')} - Redis-based state tracking\\n` +\n      `${chalk.magenta('🚀 Task Automation')} - Full development lifecycle\\n` +\n      `${chalk.yellow('📊 Real-time Monitoring')} - Terminal dashboard\\n` +\n      `${chalk.red('🔧 Zero Configuration')} - Auto-detect everything`,\n      {\n        title: chalk.bold('Debo Features'),\n        padding: 1,\n        borderColor: 'cyan',\n        borderStyle: 'round'\n      }\n    );\n    \n    console.log('\\n' + capabilitiesBox);\n  }\n  \n  async showProjectAnalysis() {\n    console.log('\\n' + chalk.cyan('🔍 Quick Project Analysis:'));\n    \n    // File count\n    try {\n      const allFiles = await this.getFileCount();\n      console.log(`  📁 Files: ${chalk.yellow(allFiles)} total`);\n    } catch {\n      console.log(`  📁 Files: Could not count`);\n    }\n    \n    // Languages detected\n    const languages = await this.detectLanguages();\n    if (languages.length > 0) {\n      console.log(`  💻 Languages: ${chalk.green(languages.join(', '))}`);\n    }\n    \n    // Git status\n    if (await fs.pathExists('.git')) {\n      try {\n        const branch = execSync('git branch --show-current', { encoding: 'utf8' }).trim();\n        console.log(`  🌿 Git Branch: ${chalk.blue(branch)}`);\n      } catch {\n        console.log(`  🌿 Git: Repository detected`);\n      }\n    }\n  }\n  \n  async getFileCount() {\n    const { glob } = await import('glob');\n    const files = await glob('**/*', {\n      cwd: this.currentPath,\n      ignore: ['node_modules/**', '.git/**', 'dist/**', 'build/**']\n    });\n    return files.length;\n  }\n  \n  async detectLanguages() {\n    const languages = new Set();\n    \n    if (await fs.pathExists('package.json')) languages.add('JavaScript/Node.js');\n    if (await fs.pathExists('requirements.txt')) languages.add('Python');\n    if (await fs.pathExists('Cargo.toml')) languages.add('Rust');\n    if (await fs.pathExists('go.mod')) languages.add('Go');\n    if (await fs.pathExists('pom.xml')) languages.add('Java');\n    \n    return Array.from(languages);\n  }\n  \n  showNextSteps() {\n    const nextStepsBox = boxen(\n      `${chalk.bold('🚀 Ready to Start! Try these commands:')}\\n\\n` +\n      `${chalk.cyan('node demo-debo.js')}         - Run this demo\\n` +\n      `${chalk.cyan('node bin/debo.js dashboard')} - Launch dashboard\\n` +\n      `${chalk.cyan('node bin/debo.js analyze')}   - Analyze codebase\\n` +\n      `${chalk.cyan('node bin/debo.js terminal')}  - Interactive mode\\n\\n` +\n      `${chalk.bold('💡 Example requests:')}\\n` +\n      `• \"Add user authentication\"\\n` +\n      `• \"Improve test coverage\"\\n` +\n      `• \"Setup CI/CD pipeline\"\\n` +\n      `• \"Refactor for better performance\"`,\n      {\n        title: chalk.bold('🎯 Next Steps'),\n        padding: 1,\n        borderColor: 'green',\n        borderStyle: 'double'\n      }\n    );\n    \n    console.log('\\n' + nextStepsBox);\n    \n    console.log('\\n' + chalk.gray('💡 Tip: Make sure Redis and Ollama are running for full functionality'));\n    console.log(chalk.gray('🔗 Redis: brew services start redis'));\n    console.log(chalk.gray('🔗 Ollama: ollama serve'));\n  }\n  \n  async runInteractiveDemo() {\n    this.showWelcome();\n    console.log(chalk.cyan('🎯 Interactive Demo Mode'));\n    console.log(chalk.gray('Type your development requests or \"quit\" to exit\\n'));\n    \n    const rl = readline.createInterface({\n      input: process.stdin,\n      output: process.stdout,\n      prompt: chalk.cyan('debo> ')\n    });\n    \n    rl.prompt();\n    \n    rl.on('line', async (input) => {\n      const request = input.trim();\n      \n      if (request === 'quit' || request === 'exit') {\n        console.log(chalk.yellow('👋 Thanks for trying Debo!'));\n        rl.close();\n        return;\n      }\n      \n      if (request === 'help') {\n        console.log(chalk.green('\\n🤖 Available demo commands:'));\n        console.log('  help  - Show this help');\n        console.log('  quit  - Exit demo');\n        console.log('  Or type any development request to see simulation\\n');\n        rl.prompt();\n        return;\n      }\n      \n      if (request) {\n        await this.simulateRequest(request);\n      }\n      \n      rl.prompt();\n    });\n    \n    rl.on('close', () => {\n      console.log('\\n' + chalk.gray('Demo ended.'));\n      process.exit(0);\n    });\n  }\n  \n  async simulateRequest(request) {\n    console.log(chalk.blue(`\\n🔄 Processing: \"${request}\"`));\n    \n    const steps = [\n      '🔍 Analyzing request...',\n      '🧠 Planning with AI agents...',\n      '⚡ Executing tasks...',\n      '✅ Request completed!'\n    ];\n    \n    for (const step of steps) {\n      const spinner = ora(step).start();\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      spinner.succeed(step);\n    }\n    \n    console.log(chalk.green('\\n🎉 In the full system, this would:'));\n    console.log('  • Analyze your codebase');\n    console.log('  • Create specific tasks');\n    console.log('  • Assign to specialized agents');\n    console.log('  • Execute with real-time monitoring');\n    console.log('  • Provide detailed progress updates');\n    console.log('');\n  }\n}\n\n// CLI Setup\nprogram\n  .name('demo-debo')\n  .description('Debo Demo - Autonomous Development System')\n  .version('2.0.0');\n\nprogram\n  .command('demo')\n  .description('Run the full demo')\n  .action(async () => {\n    const demo = new DemoDeboCLI();\n    await demo.runDemo();\n  });\n\nprogram\n  .command('interactive')\n  .alias('chat')\n  .description('Run interactive demo mode')\n  .action(async () => {\n    const demo = new DemoDeboCLI();\n    await demo.runInteractiveDemo();\n  });\n\n// Default action\nif (process.argv.length === 2) {\n  const demo = new DemoDeboCLI();\n  await demo.runDemo();\n} else {\n  program.parse();\n}\n