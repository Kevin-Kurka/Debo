#!/bin/bash

# Debo Terminal CLI Interface
# Direct access to Debo from command line

set -e

DEBO_DIR="$HOME/debo"
cd "$DEBO_DIR"

# Colors
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

# Help function
show_help() {
    echo -e "${BLUE}🤖 DEBO - Autonomous Development System${NC}"
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    echo ""
    echo -e "${YELLOW}Usage:${NC}"
    echo "  debo-cli <command> [arguments]"
    echo ""
    echo -e "${YELLOW}Commands:${NC}"
    echo "  create <name> <description> [stack]  - Create new project"
    echo "  develop <project> <feature>          - Add feature to project"
    echo "  status <project>                     - Check project status"
    echo "  deploy <project> <environment>       - Deploy project"
    echo "  analyze <project>                    - Analyze project quality"
    echo "  maintain <project> <tasks>           - Run maintenance"
    echo "  monitor [project]                    - Open monitoring dashboard"
    echo "  list                                 - List all projects"
    echo "  help                                 - Show this help"
    echo ""
    echo -e "${YELLOW}Examples:${NC}"
    echo "  debo-cli create todo-app \"Task management with React\" react"
    echo "  debo-cli develop todo-app \"Add drag and drop\""
    echo "  debo-cli status todo-app"
    echo "  debo-cli deploy todo-app production"
    echo ""
    echo -e "${YELLOW}Real-time Monitoring:${NC}"
    echo "  http://localhost:3001"
}

# MCP request function
send_mcp_request() {
    local request="$1"
    local project="$2"
    local extra="$3"
    
    # Create MCP request JSON
    local mcp_request=$(cat <<EOF
{
  "jsonrpc": "2.0",
  "id": 1,
  "method": "tools/call",
  "params": {
    "name": "debo",
    "arguments": {
      "request": "$request",
      "project": "$project",
      "options": {
        "projectName": "$project",
        "reportingMode": "detailed"
      }
    }
  }
}
EOF
)

    # Send to MCP server and parse response
    echo "$mcp_request" | node src/mcp_server.js | jq -r '.result.content[0].text' 2>/dev/null || echo "Command executed"
}

# Start monitoring server
start_monitor() {
    echo -e "${BLUE}🚀 Starting Debo monitoring server...${NC}"
    
    # Check if already running
    if curl -s http://localhost:3001 >/dev/null 2>&1; then
        echo -e "${GREEN}✅ Monitoring already running at http://localhost:3001${NC}"
        if command -v open >/dev/null 2>&1; then
            open http://localhost:3001
        fi
        return
    fi
    
    # Start monitoring server
    nohup node src/status-monitor.js > logs/monitor.log 2>&1 &
    echo $! > logs/monitor.pid
    
    # Wait for server to start
    sleep 3
    
    if curl -s http://localhost:3001 >/dev/null 2>&1; then
        echo -e "${GREEN}✅ Monitoring started at http://localhost:3001${NC}"
        if command -v open >/dev/null 2>&1; then
            open http://localhost:3001
        fi
    else
        echo -e "${RED}❌ Failed to start monitoring server${NC}"
    fi
}

# Main command handling
main() {
    case "${1:-help}" in
        "create")
            if [[ $# -lt 3 ]]; then
                echo -e "${RED}❌ Usage: debo-cli create <name> <description> [stack]${NC}"
                exit 1
            fi
            echo -e "${BLUE}🚀 Creating project: $2${NC}"
            send_mcp_request "create project $2: $3" "$2" "$4"
            ;;
        
        "develop")
            if [[ $# -lt 3 ]]; then
                echo -e "${RED}❌ Usage: debo-cli develop <project> <feature>${NC}"
                exit 1
            fi
            echo -e "${BLUE}⚡ Adding feature to $2${NC}"
            send_mcp_request "develop feature for $2: $3" "$2"
            ;;
        
        "status")
            if [[ $# -lt 2 ]]; then
                echo -e "${RED}❌ Usage: debo-cli status <project>${NC}"
                exit 1
            fi
            echo -e "${BLUE}📊 Checking status of $2${NC}"
            send_mcp_request "status of project $2" "$2"
            ;;
        
        "deploy")
            if [[ $# -lt 3 ]]; then
                echo -e "${RED}❌ Usage: debo-cli deploy <project> <environment>${NC}"
                exit 1
            fi
            echo -e "${BLUE}🚀 Deploying $2 to $3${NC}"
            send_mcp_request "deploy project $2 to $3" "$2"
            ;;
        
        "analyze")
            if [[ $# -lt 2 ]]; then
                echo -e "${RED}❌ Usage: debo-cli analyze <project>${NC}"
                exit 1
            fi
            echo -e "${BLUE}🔍 Analyzing $2${NC}"
            send_mcp_request "analyze project $2" "$2"
            ;;
        
        "maintain")
            if [[ $# -lt 3 ]]; then
                echo -e "${RED}❌ Usage: debo-cli maintain <project> <tasks>${NC}"
                exit 1
            fi
            echo -e "${BLUE}🔧 Maintaining $2${NC}"
            send_mcp_request "maintain project $2: $3" "$2"
            ;;
        
        "monitor")
            start_monitor
            ;;
        
        "list")
            echo -e "${BLUE}📋 Listing all projects${NC}"
            send_mcp_request "list all projects" ""
            ;;
        
        "help"|"--help"|"-h")
            show_help
            ;;
        
        *)
            echo -e "${RED}❌ Unknown command: $1${NC}"
            echo "Run 'debo-cli help' for usage information"
            exit 1
            ;;
    esac
}

# Run main function
main "$@"